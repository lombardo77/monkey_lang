open Ast
(*open Lexer*)

let _a = Int_Val 9

let peek l = 
    match l with
    | _::n::_ -> Some n
    | _ -> None
;;

exception ParseError of string

let rec get_statement tokens = 
    match tokens with
    | Tokens.SemCol::_ -> [Tokens.SemCol]
    | Tokens.Let::t -> get_statement t
    | h::t -> h::get_statement t
    | [] -> raise (ParseError "Parsing error")  

let rec get_exp tokens = 
    match tokens with
    | Tokens.Assign::t -> t
    | _::t -> get_exp t
    | [] -> raise (ParseError "Parsing error")  

let make_exp tokens =
    match tokens with
    | (Tokens.Integer x)::_ -> Ast.Number x
    | _ -> raise (ParseError "Exp parsing error")

let make_var tokens = 
    match tokens with
    | Tokens.Ident x::_ -> Ast.Var x
    | _ -> raise (ParseError "Var arsing error")  

let let_statement tokens = 
    let stl = get_statement tokens in
    let expl = get_exp stl in 
    let var_ast = make_var stl in 
    let exp_ast = make_exp expl in 
    Ast.Let (var_ast, exp_ast)


let rec parse tokens = 
    match tokens with
    | Tokens.Let::t -> (let_statement tokens)::(parse t)
    | _::t -> parse t
    | [] -> []

let rec print_prog sl=
    match sl with
    | h::t -> (match h with | Let(a,b) -> Printf.printf "%s, " Ast.state_of_string h | _ -> Printf.printf " "); print_prog t
    | [] -> []



